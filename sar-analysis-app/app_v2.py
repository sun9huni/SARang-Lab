# -*- coding: utf-8 -*-
"""app_v2.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_XNCiOoHkKNs9CSOKoLQ1JwyWr5p2cUB
"""

import streamlit as st
import pandas as pd
from rdkit import Chem
# 변경된 파일 이름에 맞게 import 경로 수정
from utils_v2 import load_data, find_activity_cliffs, generate_hypothesis, draw_molecule, train_qsar_model, get_morgan_fingerprint
import plotly.express as px
import numpy as np

# --- 페이지 기본 설정 ---
st.set_page_config(
    page_title="AI 기반 SAR/QSAR 분석 시스템 v2",
    page_icon="💊",
    layout="wide"
)

# --- 사이드바 ---
with st.sidebar:
    st.image("https://aigensciences.com/images/logo/aigen_logo_h.png", width=200)
    st.title("분석 설정 (v2)")
    st.markdown("---")

    uploaded_file = st.file_uploader("SAR/QSAR 데이터(.csv)를 업로드하세요.", type="csv")
    use_sample_data = st.checkbox("샘플 데이터 사용", value=True)

    st.markdown("---")

    st.subheader("SAR 분석 파라미터")
    similarity_threshold = st.slider("유사도 임계값 (Tanimoto)", 0.5, 1.0, 0.8, 0.05)
    activity_diff_threshold = st.number_input("활성도 차이 임계값 (pKi)", min_value=0.1, value=1.0, step=0.1)

# --- 메인 페이지 ---
st.title("💊 AI 기반 SAR & QSAR 분석 시스템 (v2)")
st.caption("AIGEN SCIENCES & 모두의연구소 PoC")

# 데이터 로드
df = None
if use_sample_data:
    df = load_data("data/sample_data.csv")
elif uploaded_file:
    df = load_data(uploaded_file)

if df is not None:
    # 탭(Tab) UI로 SAR와 QSAR 기능 분리
    tab1, tab2 = st.tabs(["SAR 분석 (Activity Cliff)", "QSAR 예측 (신규 분자)"])

    # --- SAR 분석 탭 ---
    with tab1:
        st.header("SAR 분석: 주요 활성 변화 요인")
        st.dataframe(df.head())

        fig = px.histogram(df, x='activity', title='활성도(pKi) 분포', labels={'activity': 'pKi 값'})
        st.plotly_chart(fig, use_container_width=True)

        if st.button("Activity Cliff 분석 시작", type="primary", key='sar_button'):
            with st.spinner("Activity Cliff를 분석 중입니다..."):
                cliffs = find_activity_cliffs(df, similarity_threshold, activity_diff_threshold)
            st.session_state['cliffs'] = cliffs

        if 'cliffs' in st.session_state:
            cliffs = st.session_state['cliffs']
            if not cliffs:
                st.warning("설정된 조건에 맞는 Activity Cliff를 찾을 수 없습니다. 임계값을 조정해보세요.")
            else:
                st.success(f"총 {len(cliffs)}개의 Activity Cliff를 찾았습니다. 분석할 쌍을 선택하세요.")

                cliff_options = [f"{i+1}. {c['mol_1']['ID']} vs {c['mol_2']['ID']} (ΔpKi: {c['activity_diff']:.2f})" for i, c in enumerate(cliffs)]
                selected_option = st.selectbox("분석할 Activity Cliff 선택:", cliff_options, key='cliff_select')

                selected_index = cliff_options.index(selected_option)
                selected_cliff = cliffs[selected_index]

                st.subheader("SAR 요약 리포트")
                col1, col2 = st.columns(2)
                mol1_info, mol2_info = selected_cliff['mol_1'], selected_cliff['mol_2']

                with col1:
                    st.info(f"**화합물 1: {mol1_info['ID']}**")
                    st.image(draw_molecule(mol1_info['SMILES']), caption=f"pKi: {mol1_info['activity']:.2f}")
                with col2:
                    st.info(f"**화합물 2: {mol2_info['ID']}**")
                    st.image(draw_molecule(mol2_info['SMILES']), caption=f"pKi: {mol2_info['activity']:.2f}")

                st.metric("Tanimoto 유사도", f"{selected_cliff['similarity']:.3f}")

                with st.spinner("AI가 화학적 가설을 생성 중입니다..."):
                    hypothesis = generate_hypothesis(selected_cliff)
                if hypothesis:
                    st.markdown("**AI-Generated Hypothesis:**")
                    st.info(hypothesis)

    # --- QSAR 예측 탭 ---
    with tab2:
        st.header("QSAR 예측: 신규 분자 활성 예측")

        # 모델 훈련
        with st.spinner("QSAR 모델을 훈련 중입니다..."):
            if 'qsar_model' not in st.session_state or use_sample_data or uploaded_file:
                 model, message, r2 = train_qsar_model(df)
                 st.session_state['qsar_model'] = model
                 st.session_state['qsar_message'] = message
                 st.session_state['qsar_r2'] = r2

        st.success(st.session_state['qsar_message'])

        if st.session_state['qsar_model']:
            st.subheader("신규 화합물 정보 입력")
            new_smiles = st.text_input("활성을 예측할 분자의 SMILES 문자열을 입력하세요:", "c1ccccc1")

            if st.button("활성 예측", type="primary", key='qsar_button'):
                if new_smiles:
                    mol = Chem.MolFromSmiles(new_smiles)
                    if mol:
                        fp = get_morgan_fingerprint(mol)
                        fp_array = np.array(fp).reshape(1, -1)

                        model = st.session_state['qsar_model']
                        predicted_activity = model.predict(fp_array)[0]

                        st.subheader("예측 결과")
                        col1, col2 = st.columns(2)
                        with col1:
                            st.image(draw_molecule(new_smiles), caption="입력된 분자 구조")
                        with col2:
                            st.metric(label="예측된 pKi 활성도", value=f"{predicted_activity:.3f}")
                            st.progress(min(1.0, predicted_activity / 10.0)) # 10을 최대 활성도로 가정
                            st.caption(f"참고: 모델의 예측 정확도(R² Score)는 약 {st.session_state['qsar_r2']:.3f} 입니다.")
                    else:
                        st.error("유효하지 않은 SMILES 문자열입니다. 다시 확인해주세요.")
else:
    st.info("분석을 시작하려면 사이드바에서 CSV 파일을 업로드하거나 샘플 데이터를 사용하세요.")
